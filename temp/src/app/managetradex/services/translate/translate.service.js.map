{"version":3,"sources":["../../../../../../src/app/managetradex/services/translate/translate.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,MAAA,EAAO,MAAQ,eAAA,CAAgB;AACpD,OAAO,EAAE,YAAA,EAAa,MAAO,gBAAA,CAAiB;AAG9C;IAOE,0BAA0B;IAC1B,0BAAqB,aAAkB;QAAlB,kBAAa,GAAb,aAAa,CAAK;IACvC,CAAC;IAND,sBAAW,yCAAW;aAAtB;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;;;OAAA;IAMM,8BAAG,GAAV,UAAW,IAAY;QACnB,uBAAuB;QACvB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC7B,CAAC;IAEO,oCAAS,GAAjB,UAAkB,GAAW;QACzB,8BAA8B;QAC9B,IAAI,WAAW,GAAG,GAAG,CAAC;QAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;QACrD,CAAC;QAED,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAEM,kCAAO,GAAd,UAAe,GAAW;QACtB,mBAAmB;QACnB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAQH,uBAAC;AAAD,CAtCA,AAsCC;;AAPM,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,+BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,YAAY,EAAG,EAAE,EAAG,EAAC;CAC1E,EAF6F,CAE7F,CAAC","file":"translate.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject  } from '@angular/core';\nimport { TRANSLATIONS } from './translations';  \n\n\nexport class TranslateService {\n  private _currentLang: string;\n\n  public get currentLang() {\n      return this._currentLang;\n  }\n\n  // Inject our translations\n  constructor( private _translations: any) {\n  }\n\n  public use(lang: string): void {\n      // Set current language\n      this._currentLang = lang;\n  }\n\n  private translate(key: string): string {\n      // Private perform translation\n      let translation = key;\n\n      if (this._translations[this.currentLang] && this._translations[this.currentLang][key]) {\n          return this._translations[this.currentLang][key];\n      }\n\n      return translation;\n  }\n\n  public instant(key: string) {\n      // Call translation\n      return this.translate(key); \n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [TRANSLATIONS, ] }, ]},\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}